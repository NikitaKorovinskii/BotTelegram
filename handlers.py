from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
)
from telegram.ext import ContextTypes, ConversationHandler
import os
import logging
from excel_utils import save_to_excel, get_user_exercises
from graph_utils import generate_exercise_graph
from export_utils import export_user_data

logging.basicConfig(level=logging.INFO)

CHOOSING_EXERCISE, TYPING_NEW_EXERCISE, TYPING_REPS, TYPING_WEIGHT = range(4)

MAIN_MENU = ReplyKeyboardMarkup(
    [["–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ üèãÔ∏è‚Äç‚ôÇÔ∏è", "–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ üìä"]],
    resize_keyboard=True
)

def get_name(update: Update):
    user = update.effective_user
    return user.first_name or user.username or "–¥—Ä—É–≥"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = get_name(update)
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkOut –±–æ—Ç! üèãÔ∏è‚Äç‚ôÇÔ∏è\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è:"
    )
    await update.message.reply_text(text, reply_markup=MAIN_MENU)

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    name = get_name(update)
    user = update.effective_user
    username = user.username or str(user.id)

    if text == "–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ üìä":
        exercises = get_user_exercises(username)
        if not exercises:
            await update.message.reply_text(
                f"üìâ –û–π, {name}, —É —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤. "
                "–î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –∏ –º—ã —É–≤–∏–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å! üöÄ"
            )
            return
        buttons = [[InlineKeyboardButton(ex, callback_data=f"graph_{ex}")] for ex in exercises]
        buttons.append([InlineKeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="export_stats")])
        await update.message.reply_text(
            f"üí™ –û—Ç–ª–∏—á–Ω–æ, {name}! –í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        await update.message.reply_text(
            f"üòÖ –•–º, {name}, —è –Ω–µ –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá"
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    username = user.username or str(user.id)
    data = query.data

    if data.startswith("graph_"):
        exercise = data.replace("graph_", "")
        success = generate_exercise_graph(exercise, username)
        if success:
            with open("graph.png", "rb") as photo:
                await query.message.reply_photo(photo)
            os.remove("graph.png")
        else:
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ —ç—Ç–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ üòâ")

async def export_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    username = user.username or str(user.id)

    filepath = export_user_data(username)
    if filepath:
        with open(filepath, "rb") as file:
            await query.message.reply_document(file, filename=os.path.basename(filepath))
        os.remove(filepath)
    else:
        await query.message.reply_text("‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏. –î–æ–±–∞–≤—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")

async def add_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = get_name(update)
    user = update.effective_user
    username = user.username or str(user.id)

    exercises = get_user_exercises(username)
    buttons = [[InlineKeyboardButton(ex, callback_data=f"add_{ex}")] for ex in exercises]
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="add_new")])

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            f"üí° {name}, –≤—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤–æ–µ:", reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        await update.message.reply_text(
            f"üí° {name}, –≤—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤–æ–µ:", reply_markup=InlineKeyboardMarkup(buttons)
        )
    return CHOOSING_EXERCISE

async def exercise_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info(f"Callback data received: {query.data}")
    await query.answer()
    data = query.data
    name = get_name(update)

    if data == "add_new":
        await query.edit_message_text(f"üìù {name}, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        return TYPING_NEW_EXERCISE
    else:
        exercise = data.replace("add_", "")
        context.user_data["exercise"] = exercise
        await query.edit_message_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {name}! –¢—ã –≤—ã–±—Ä–∞–ª: {exercise}.\n–°–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å–¥–µ–ª–∞–ª? üî•")
        return TYPING_REPS

async def receive_new_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = get_name(update)
    context.user_data["exercise"] = update.message.text.strip()
    await update.message.reply_text(f"üî• {name}, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç—ã –ø–æ–≤—Ç–æ—Ä–∏–ª —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ?")
    return TYPING_REPS

async def receive_reps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = get_name(update)
    reps_text = update.message.text.strip()
    if not reps_text.isdigit():
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –±–µ–∑ –±—É–∫–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return TYPING_REPS
    context.user_data["reps"] = reps_text
    await update.message.reply_text(f"‚öñÔ∏è {name}, –∫–∞–∫–æ–π –≤–µ—Å —Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª?")
    return TYPING_WEIGHT

async def receive_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = get_name(update)
    weight_text = update.message.text.replace(',', '.').strip()
    try:
        weight_val = float(weight_text)
        if weight_val < 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤–µ—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15.5")
        return TYPING_WEIGHT

    context.user_data["weight"] = weight_text

    user = update.effective_user
    username = user.username or str(user.id)
    save_to_excel(username, context.user_data)

    await update.message.reply_text(f"üéâ –û—Ç–ª–∏—á–Ω–æ, {name}! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", reply_markup=MAIN_MENU)
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error(msg="Exception while handling an update:", exc_info=context.error)
    if update and hasattr(update, "message") and update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
