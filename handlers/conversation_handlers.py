from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
import logging
from utils.excel_utils import save_to_excel, get_user_exercises
from handlers.constants import (
    CHOOSING_EXERCISE, TYPING_NEW_EXERCISE, TYPING_REPS, TYPING_WEIGHT, MAIN_MENU
)

def get_name(update):
    user = update.effective_user
    return user.first_name or user.username or "–¥—Ä—É–≥"

async def add_start_callback(update, context: ContextTypes.DEFAULT_TYPE):
    name = get_name(update)
    user = update.effective_user
    username = user.username or str(user.id)

    exercises = get_user_exercises(username)
    buttons = [[InlineKeyboardButton(ex, callback_data=f"add_{ex}")] for ex in exercises]
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="add_new")])

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            f"üí° {name}, –≤—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤–æ–µ:", reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        await update.message.reply_text(
            f"üí° {name}, –≤—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤–æ–µ:", reply_markup=InlineKeyboardMarkup(buttons)
        )
    return CHOOSING_EXERCISE

async def exercise_chosen(update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info(f"Callback data received: {query.data}")
    await query.answer()
    data = query.data
    name = get_name(update)

    if data == "add_new":
        await query.edit_message_text(f"üìù {name}, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        return TYPING_NEW_EXERCISE
    else:
        exercise = data.replace("add_", "")
        context.user_data["exercise"] = exercise
        await query.edit_message_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {name}! –¢—ã –≤—ã–±—Ä–∞–ª: {exercise}.\n–°–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å–¥–µ–ª–∞–ª? üî•")
        return TYPING_REPS

async def receive_new_exercise(update, context: ContextTypes.DEFAULT_TYPE):
    name = get_name(update)
    context.user_data["exercise"] = update.message.text.strip()
    await update.message.reply_text(f"üî• {name}, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç—ã –ø–æ–≤—Ç–æ—Ä–∏–ª —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ?")
    return TYPING_REPS

async def receive_reps(update, context: ContextTypes.DEFAULT_TYPE):
    name = get_name(update)
    reps_text = update.message.text.strip()
    if not reps_text.isdigit():
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –±–µ–∑ –±—É–∫–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return TYPING_REPS
    context.user_data["reps"] = reps_text
    await update.message.reply_text(f"‚öñÔ∏è {name}, –∫–∞–∫–æ–π –≤–µ—Å —Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª?")
    return TYPING_WEIGHT

async def receive_weight(update, context: ContextTypes.DEFAULT_TYPE):
    name = get_name(update)
    weight_text = update.message.text.replace(',', '.').strip()
    try:
        weight_val = float(weight_text)
        if weight_val < 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤–µ—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15.5")
        return TYPING_WEIGHT

    context.user_data["weight"] = weight_text

    user = update.effective_user
    username = user.username or str(user.id)
    save_to_excel(username, context.user_data)

    await update.message.reply_text(f"üéâ –û—Ç–ª–∏—á–Ω–æ, {name}! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", reply_markup=MAIN_MENU)
    return -1  # ConversationHandler.END
